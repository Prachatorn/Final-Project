installed.packages(stringr)
install.packages("stringr")
library("stringr")
?substr
# Use the `substr()` function to extract the 15th through the last letter of the
# `lyric`, and store the result in a variable called `fruits`
# Hint: use `nchar()` to determine how many total letters there are!
nchar(lyric)
# Create a variable `lyric` that contains the text "I like to eat apples and
# bananas"
lyric <- "I like to eat apples and bananas"
# Use the `substr()` function to extract the 1st through 13th letters from the
# `lyric`, and store the result in a variable called `intro`
# Use `?substr` to see more about this function
intro <- substr(lyric, 1, 13)
# Use the `substr()` function to extract the 15th through the last letter of the
# `lyric`, and store the result in a variable called `fruits`
# Hint: use `nchar()` to determine how many total letters there are!
nchar(lyric)
fruits <- substr(lyric, 15, 32)
?gsub
fruits <- substr(lyric, 15, 32)
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "ee".
# Store the result in a variable called `fruits_e`
# Hint: see http://www.endmemo.com/program/R/sub.php for a simpmle example (or
# use `?gsub`)
fruits_e <- gsub(fruits, "a", "ee" )
fruits_o
# Use the `gsub()` function to substitute all the "a"s in `fruits` with "o".
# Store the result in a variable called `fruits_o`
fruits_o <- gsub("a", "o", fruits)
fruits_o
# Create a new variable `lyric_e` that is the `intro` combined with the new
# `fruits_e` ending. Print out this variable
lyric_e <- intro + fruits_e
print(lyric_e)
# Create a new variable `lyric_e` that is the `intro` combined with the new
# `fruits_e` ending. Print out this variable
lyric_e <- paste(intro, fruits_e)
# Create a new variable `lyric_e` that is the `intro` combined with the new
# `fruits_e` ending. Print out this variable
lyric_e <- paste(intro, fruits_e)
print(lyric_e)
# Without making a new variable, print out the `intro` combined with the new
# `fruits_o` ending
paste(intro, fruits_o)
add_three <- function(x) {
x + 3
}
add_three(9)
add_three <- function(x) {
result <- x + 3
result
}
result
# Create a variable `ten` that is the result of passing 7 to your `add_three`
# function
ten <- add_three(7)
total inches <- feet * 12 + inches
meters <- .025 * inches
meters #returns meters
total inches <- feet * 12 + inches
imperial_to_metric <- function(feet, inches) {
total inches <- feet * 12 + inches
meters <- .025 * inches
meters #returns meters
}
imperial_to_metric <- function(feet, inches) {
total inches <- feet * 12 + inches
meters <- .025 * inches
meters #returns meters
}
# Define a function `imperial_to_metric` that takes in two arguments: a number
# of feet and a number of inches
# The function should return the equivalent length in meters
imperial_to_metric <- function(feet, inches) {
total inches <- feet * 12 + inches
meters <- .025 * inches
meters #returns meters
}
total inches <- feet * 12 + inches
# Define a function `imperial_to_metric` that takes in two arguments: a number
# of feet and a number of inches
# The function should return the equivalent length in meters
imperial_to_metric <- function(feet, inches) {
total_inches <- feet * 12 + inches
meters <- .025 * inches
meters #returns meters
}
imperial_to_metric(10,2)
meters <- .025 * total_inches
total_inches <- feet * 12 + inches
total_inches <- feet * 12 + inches
# Define a function `imperial_to_metric` that takes in two arguments: a number
# of feet and a number of inches
# The function should return the equivalent length in meters
imperial_to_metric <- function(feet, inches) {
total_inches <- feet * 12 + inches
meters <- .025 * total_inches
meters #returns meters
}
imperial_to_metric(10,2)
# Create a variable `height_in_meters` by passing your height in imperial to the
# `imperial_to_metric` function
height_in_meters <- imperial_to_metric(5,7)
height_in_meters
library(shiny)
library(dplyr)
library(ggplot2)
race_totals <- midwest %>%
select(midwest$popamerindian, midwest$popasian, midwest$popblack,
midwest$popother, midwest$popwhite)
race_totals <- midwest %>%
select(popamerindian, popasian, popblack, popother,popwhite)
page_one <- tabPanel(
"First Page", # label for the tab in the navbar
titlePanel("Page 1"), # show with a displayed title
selectInput(
inputId = "race",  # key this value will be assigned to
label = "Pick a race", # label to display by the dropdown
choices = race_totals, #choices
selected = race_totals$popamerindian # first selection
)
#?selectInput
# Define content for the second page
#page_two <- tabPanel(
"Second Page" # label for the tab in the navbar
# ...more content would go here...
)
poverty_adults <- midwest %>%
select(percadultpoverty)
poverty_adults <- midwest %>%
select(percadultpoverty, county, state)
range_poverty_adults <- range(poverty_adults$percadultpoverty)
range_poverty_adults <- range(poverty_adults$percadultpoverty)
states <- poverty_adults %>%
select(state)
#Define content for the second page
page_two <- tabPanel(
"Second Page",
sidebarLayout(
sidebarPanel(
helpText("Investigate poverty rates by state"),
selectInput("state",
label = "Choose a state to display",
choices = states,
selected = states),
sliderInput(
inputID = "poverty",
label = "Select Poverty Percentage Range",
min = range_poverty_adults[1],
max = range_poverty_adults[2],
value = range_poverty_adults
)
),
mainPanel()
)
) # label for the tab in the navbar
#Define content for the second page
page_two <- tabPanel(
"Second Page",
sidebarLayout(
sidebarPanel(
helpText("Investigate poverty rates by state"),
selectInput("state",
label = "Choose a state to display",
choices = states,
selected = states),
sliderInput(
"poverty",
label = "Select Poverty Percentage Range",
min = range_poverty_adults[1],
max = range_poverty_adults[2],
value = range_poverty_adults
)
),
mainPanel()
)
) # label for the tab in the navbar
install.packages(plotly)
"plotly"
install.packages("plotly")
library(plotly)
library(ggplot2)
output$plot <- renderPlotly(
plot_ly(poverty_adults,
x = poverty_adults$county,
y = poverty_adults$percadultpoverty)
)
#Define content for the second page
page_two <- tabPanel(
"Second Page",
sidebarLayout(
sidebarPanel(
helpText("Investigate poverty rates by state"),
selectInput("state",
label = "Choose a state to display",
choices = states,
selected = states),
sliderInput(
"poverty",
label = "Select Poverty Percentage Range",
min = range_poverty_adults[1],
max = range_poverty_adults[2],
value = range_poverty_adults
)
),
plotOutput("plot1")
mainPanel()
)
) # label for the tab in the navbar
#Define content for the second page
page_two <- tabPanel(
"Second Page",
sidebarLayout(
sidebarPanel(
helpText("Investigate poverty rates by state"),
selectInput("state",
label = "Choose a state to display",
choices = states,
selected = states),
sliderInput(
"poverty",
label = "Select Poverty Percentage Range",
min = range_poverty_adults[1],
max = range_poverty_adults[2],
value = range_poverty_adults
)
),
plotOutput("plot1")
mainPanel()
)
) # label for the tab in the navbar
#Define content for the second page
page_two <- tabPanel(
"Second Page",
sidebarLayout(
sidebarPanel(
helpText("Investigate poverty rates by state"),
selectInput("state",
label = "Choose a state to display",
choices = states,
selected = states),
sliderInput(
"poverty",
label = "Select Poverty Percentage Range",
min = range_poverty_adults[1],
max = range_poverty_adults[2],
value = range_poverty_adults
)
),
plotOutput("plot1"),
mainPanel()
)
) # label for the tab in the navbar
runApp('Desktop/Info-201/a8-jnwerner')
runApp('Desktop/Info-201/a8-jnwerner')
runApp('Desktop/Info-201/a8-jnwerner')
runApp('Desktop/Info-201/a8-jnwerner')
?sidebarLayout
runApp('Desktop/Info-201/a8-jnwerner')
runApp('Desktop/Info-201/a8-jnwerner')
runApp('Desktop/Info-201/a8-jnwerner')
runApp('Desktop/Info-201/a8-jnwerner')
library(plotly)
runApp('Desktop/Info-201/a8-jnwerner')
runApp('Desktop/Info-201/a8-jnwerner')
runApp('Desktop/Info-201/a8-jnwerner')
runApp('Desktop/Info-201/a8-jnwerner')
View(poverty_adults)
runApp('Desktop/Info-201/a8-jnwerner')
runApp('Desktop/Info-201/a8-jnwerner')
# Page 2 Plots
output$plot2 <- renderPlot(
ggplot(poverty_adults,
aes(
x = poverty_adults$state[county],
y = poverty_adults$percadultpoverty)
) + geom_point()
+ ggtitle("Poverty Percentage by County")
+ xlab("County")
+ ylab("Poverty Percentage")
)
runApp('Desktop/Info-201/a8-jnwerner')
runApp('Desktop/Info-201/a8-jnwerner')
runApp('Desktop/Info-201/a8-jnwerner')
runApp('Desktop/Info-201/a8-jnwerner')
View(race_totals)
race_totals <- midwest %>%
select(state, popamerindian, popasian, popblack, popother,popwhite)
runApp('Desktop/Info-201/a8-jnwerner')
runApp('Desktop/Info-201/a8-jnwerner')
runApp('Desktop/Info-201/a8-jnwerner')
runApp('Desktop/Info-201/a8-jnwerner')
runApp('Desktop/Info-201/a8-jnwerner')
shiny::runApp('Desktop/Info-201/a8-jnwerner')
runApp('Desktop/Info-201/a8-jnwerner')
runApp('Desktop/Info-201/a8-jnwerner')
runApp('Desktop/Info-201/a8-jnwerner')
runApp('Desktop/Info-201/a8-jnwerner')
race_totals <- midwest %>%
select(state, popamerindian, popasian, popblack, popother,popwhite)
poverty_adults <- midwest %>%
select(percadultpoverty, county, state)
range_poverty_adults <- range(poverty_adults$percadultpoverty)
states <- poverty_adults %>%
select(state)
runApp('Desktop/Info-201/a8-jnwerner')
runApp('Desktop/Info-201/a8-jnwerner')
runApp('Desktop/Info-201/a8-jnwerner')
View(midwest)
View(poverty_adults)
runApp('Desktop/Info-201/a8-jnwerner')
runApp('Desktop/Info-201/a8-jnwerner')
runApp('Desktop/Info-201/a8-jnwerner')
runApp('Desktop/Info-201/a8-jnwerner')
runApp('Desktop/Info-201/a8-jnwerner')
runApp('Desktop/Info-201/a8-jnwerner')
?sidebarLayout
runApp('Desktop/Info-201/a8-jnwerner')
runApp('Desktop/Info-201/a8-jnwerner')
runApp('Desktop/Info-201/a8-jnwerner')
shiny::runApp('Desktop/Info-201/a8-jnwerner')
runApp('Desktop/Info-201/a8-jnwerner')
runApp('Desktop/Info-201/a8-jnwerner')
runApp('Desktop/Info-201/a8-jnwerner')
runApp('Desktop/Info-201/a8-jnwerner')
runApp('Desktop/Info-201/a8-jnwerner')
runApp('Desktop/Info-201/a8-jnwerner')
runApp('Desktop/Info-201/a8-jnwerner')
runApp('Desktop/Info-201/a8-jnwerner')
runApp('Desktop/Info-201/a8-jnwerner')
runApp('Desktop/Info-201/a8-jnwerner')
runApp('Desktop/Info-201/a8-jnwerner')
runApp('Desktop/Info-201/a8-jnwerner')
runApp('Desktop/Info-201/a8-jnwerner')
runApp('Desktop/Info-201/a8-jnwerner')
ggplot(df,
aes(
x = df$county,
y = df$percadultpoverty,
colour = df$inmetro
)
) + geom_point() +
scale_discrete_manual(breaks = c("0", "1"), values = c("red", "blue")) +
ggtitle("Poverty Percentage by County in a Given State") +
xlab(input$state) +
ylab("Poverty Percentage") +
labs(color = "Metropolitan or Rural Area") +
theme(axis.text.x = element_blank(),
axis.ticks.x = element_blank())
runApp('Desktop/Info-201/a8-jnwerner')
runApp('Desktop/Info-201/a8-jnwerner')
runApp('Desktop/Info-201/a8-jnwerner')
library(shiny)
poverty_adults <- midwest %>%
group_by(state) %>%
select(percadultpoverty, county, state, inmetro)
View(poverty_adults)
shiny::runApp('Desktop/Info-201/Final-Project')
setwd("~/Desktop/Info-201/Final-Project")
shinyApp()
#Plots
server <- function(input, output) {
output$region_time <- renderPlot({
ggplot(regionals,
aes_string(
x = "years",
y = input$area
)
) + geom_line() +
ggtitle("Change in Total Regional Arrivals by Region From 2008-2016") +
xlab("Year") +
ylab("Arrivals")
})
output$country_time <- renderPlot({
ggplot(countries,
aes_string(
x = "year",
y = input$country
)
) + geom_line() +
ggtitle("Change in Total Arrivals by Country From 2008-2016") +
xlab("Year") +
ylab("Arrivals")
})
output$ceilings <- renderPlot({
ggplot(caps, aes(x = Year)) +
geom_line(aes(y= Cap, colour= "Cap")) +
geom_line(aes(y= Admitted, colour= "Admitted")) +
geom_point(aes (y = Cap)) +
geom_point(aes (y = Admitted)) +
scale_y_continuous("Total Numbers of People",
breaks= seq(56000, 86000, 2000)) +
ggtitle("Refugee Admissions Ceiling vs Total Refugee Admissions") +
scale_color_manual(name = "Total Numbers", values= c("Cap" = "red",
"Admitted" = "green"),
labels = c("Admitted", "Ceiling Cap"))
})
}
runApp()
#regional arrivals chart
#<<<<<<< HEAD
regional_arrivals <- read.csv("Refugees/regional_arrivals.csv",
stringsAsFactors = F)
setnames(regional_arrivals, old=c("X2007","X2008", "X2009", "X2010", "X2011",
"X2012", "X2013", "X2014", "X2015", "X2016"),
new=c("2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014",
"2015", "2016"))
setNames(regional_arrivals, old=c("X2007","X2008", "X2009", "X2010", "X2011",
"X2012", "X2013", "X2014", "X2015", "X2016"),
new=c("2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014",
"2015", "2016"))
setNames(regional_arrivals, c("X2007","X2008", "X2009", "X2010", "X2011",
"X2012", "X2013", "X2014", "X2015", "X2016"),
c("2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014",
"2015", "2016"))
setNames(regional_arrivals, c("X2007","X2008", "X2009", "X2010", "X2011",
"X2012", "X2013", "X2014", "X2015", "X2016"),
c("2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014",
"2015", "2016"))
regional_arrivals <- setNames(regional_arrivals, c("X2007","X2008", "X2009", "X2010", "X2011",
"X2012", "X2013", "X2014", "X2015", "X2016"),
c("2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014",
"2015", "2016"))
regional_arrivals <- setNames(colnames(regional_arrivals), c("X2007","X2008", "X2009", "X2010", "X2011",
"X2012", "X2013", "X2014", "X2015", "X2016"),
c("2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014",
"2015", "2016"))
library(data.table)
regional_arrivals <- setNames(regional_arrivals, c("X2007","X2008", "X2009", "X2010", "X2011",
"X2012", "X2013", "X2014", "X2015", "X2016"),
c("2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014",
"2015", "2016"))
#    )
#    ),
#     mainPanel(
#       plotOutput("country_time"),
#       p("This plot provides information about the total arrivals of a selected
#     country during the Obama administration. You may select one or two
#     countries to compare their numbers.")
#     )
#   )
# )
>>>>>>> 42cecb3e991ca28ff7a50a6d8d7e3328a98f39a0
regional_arrivals <- setNames(regional_arrivals, c("X2007","X2008", "X2009", "X2010", "X2011",
"X2012", "X2013", "X2014", "X2015", "X2016"),
c("2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014",
"2015", "2016"))
setNames(regional_arrivals, c("X2007","X2008", "X2009", "X2010", "X2011",
"X2012", "X2013", "X2014", "X2015", "X2016"),
c("2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014",
"2015", "2016"))
setnames(regional_arrivals, c("X2007","X2008", "X2009", "X2010", "X2011",
"X2012", "X2013", "X2014", "X2015", "X2016"),
c("2007", "2008", "2009", "2010", "2011", "2012", "2013", "2014",
"2015", "2016"))
librar(data.table)
library(data.table)
setwd("~/Desktop/Info-201/Final-Project")
setwd("~/Desktop/Info-201/Final-Project")
source("julianne.R")
runApp()
runApp()
runApp()
source('~/Desktop/Info-201/Final-Project/world_map.R', echo=TRUE)
# Working on the map for affirmative asylumn for immigrants coming to the
# United States.
colnames(affirmative_asylum)
affirmative_asylum <- read.csv("Refugees/country_affirmative_asylum.csv",
stringsAsFactors = F)
defensive_asylum <- read.csv("Refugees/country_defensive_asylum.csv",
stringsAsFactors = F)
country_arrival <- read.csv("Refugees/country_arrivals_2.csv",
stringsAsFactors = F)
# Working on the map for affirmative asylumn for immigrants coming to the
# United States.
colnames(affirmative_asylum)
colnames(affirmative_asylum)[colnames(affirmative_asylum) ==
"?..Country"] <- "country"
# Working on the map for affirmative asylumn for immigrants coming to the
# United States.
colnames(affirmative_asylum)
colnames(affirmative_asylum)[colnames(affirmative_asylum) ==
"?..Country"] <- "country"
runApp()
# Working on the map for affirmative asylumn for immigrants coming to the
# United States.
colnames(affirmative_asylum)
colnames(affirmative_asylum)[colnames(affirmative_asylum) ==
"Country"] <- "country"
runApp()
runApp()
runApp()
runApp()
runApp()
colnames(country_arrival)[colnames(country_arrival) ==
"Country"] <- "country"
runApp()
library(plotly)
runApp()
runApp()
runApp()
runApp()
runApp()
country_plot2 <- ggplotly(country_plot)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
