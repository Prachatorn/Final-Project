x
beta
y
predict <- lm(y~x + I(beta[1] * x) + I(beta[2] * x) + I(beta[3] * x) +
I(beta[4] * x) + I(beta[5] * x) + I(beta[6] * x) + I(beta[7] * x) +
I(beta[8] * x) + I(beta[9] * x) + I(beta[10]) * x)
predict <- lm(y~x + beta[1]  * I(x) + I(beta[2] * x) + I(beta[3] * x) +
I(beta[4] * x) + I(beta[5] * x) + I(beta[6] * x) + I(beta[7] * x) +
I(beta[8] * x) + I(beta[9] * x) + I(beta[10]) * x)
predict <- lm(y~x + beta[1]  * I(x) + beta[2] * I(x) + beta[3] * I(x) +
beta[4] * I(x) + beta[5] * I(x) + beta[6] * I(x) + beta[7] * I(x) +
beta[8] * I(x) + beta[9] * I(x) + beta[10] * I(x))
x = 1 + rnorm(n, 0, 1)[1:10]
predict <- lm(y~x[1] + beta[1]  * I(x) + beta[2] * I(x) + beta[3] * I(x) +
beta[4] * I(x) + beta[5] * I(x) + beta[6] * I(x) + beta[7] * I(x) +
beta[8] * I(x) + beta[9] * I(x) + beta[10] * I(x))
predict <- lm(y~x + beta[1]  * I(x) + beta[2] * I(x) + beta[3] * I(x) +
beta[4] * I(x) + beta[5] * I(x) + beta[6] * I(x) + beta[7] * I(x) +
beta[8] * I(x) + beta[9] * I(x) + beta[10] * I(x))
beta <- runif(n, -1, 1)
beta <- runif(n, -1, 1)
x = 1 + rnorm(n, 0, 1)[1:10]
predict <- lm(beta~x + beta[1]  * I(x) + beta[2] * I(x) + beta[3] * I(x) +
beta[4] * I(x) + beta[5] * I(x) + beta[6] * I(x) + beta[7] * I(x) +
beta[8] * I(x) + beta[9] * I(x) + beta[10] * I(x))
predict <- lm(beta~x + beta[1]  * I(x) + beta[2] * I(x) + beta[3] * I(x) +
beta[4] * I(x) + beta[5] * I(x) + beta[6] * I(x) + beta[7] * I(x) +
beta[8] * I(x) + beta[9] * I(x) + beta[10] * I(x))
predict <- lm(beta~y + beta[1]  * I(x) + beta[2] * I(x) + beta[3] * I(x) +
beta[4] * I(x) + beta[5] * I(x) + beta[6] * I(x) + beta[7] * I(x) +
beta[8] * I(x) + beta[9] * I(x) + beta[10] * I(x))
predict <- lm(y~beta + beta[1]  * I(x) + beta[2] * I(x) + beta[3] * I(x) +
beta[4] * I(x) + beta[5] * I(x) + beta[6] * I(x) + beta[7] * I(x) +
beta[8] * I(x) + beta[9] * I(x) + beta[10] * I(x))
x = 1 + rnorm(n, 0, 1)
predict <- lm(beta~x + beta[1]  * I(x) + beta[2] * I(x) + beta[3] * I(x) +
beta[4] * I(x) + beta[5] * I(x) + beta[6] * I(x) + beta[7] * I(x) +
beta[8] * I(x) + beta[9] * I(x) + beta[10] * I(x))
beta1 <- beta
beta1 <- beta
beta1 <- betapredict <- lm(beta~x + beta[1]  * I(x) + beta[2] * I(x) + beta[3] * I(x) +
beta[4] * I(x) + beta[5] * I(x) + beta[6] * I(x) + beta[7] * I(x) +
beta[8] * I(x) + beta[9] * I(x) + beta[10] * I(x))
set.seed(123)
n = 20
beta <- runif(n, -1, 1)
y = 1
y
y = 1 + rnorm(n, 0, 1)
predict <- lm(y + beta[1]  * I(x) + beta[2] * I(x) + beta[3] * I(x) +
beta[4] * I(x) + beta[5] * I(x) + beta[6] * I(x) + beta[7] * I(x) +
beta[8] * I(x) + beta[9] * I(x) + beta[10] * I(x))
y = 1 + rnorm(n, 0, 1)
predict <- lm(y[0] + beta[1]  * I(x) + beta[2] * I(x) + beta[3] * I(x) +
beta[4] * I(x) + beta[5] * I(x) + beta[6] * I(x) + beta[7] * I(x) +
beta[8] * I(x) + beta[9] * I(x) + beta[10] * I(x))
x <- runif(n, -1, 1)
predict <- lm(y~x +I(x) + I(X))
y = 1 + rnorm(n, 0, 1)
x <- runif(n, -1, 1)
predict <- lm(y~x +I(x) + I(X))
x <- runif(n, -1, 1)
predict <- lm(y~x +I(x) + I(x))
predict <- lm(y~x +I(x) + I(x) + I(x) + I(x) + I(x) +
I(x) + I(x) + I(x) + I(x) + I(x))
predict
x1 <- runif(n, -1, 1)
x2 <- runif(n, -1, 1)
x3 <- runif(n, -1, 1)
predict <- lm(y~x +I(x1) + I(x2) + I(x3) + I(x) + I(x) +
I(x) + I(x) + I(x) + I(x) + I(x))
predict
x4 <- runif(n, -1, 1)
, -
x5 <- runif(n, -1, 1)
x6 <- runif(n, -1, 1)
x8 <- runif(n, -1, 1)
x9 <- runif(n, -1, 1)
x10 <- runif(n, -1, 1)
source('~/.active-rstudio-document', echo=TRUE)
predict <- lm(y~x +I(x1) + I(x2) + I(x3) + I(x4) + I(x5) +
I(x6) + I(x7) + I(x8) + I(x9) + I(x10))
predict
x8 <- runif(n, -1, 1)
x9 <- runif(n, -1, 1)
x10 <- runif(n, -1, 1)
predict <- lm(y~x +I(x1) + I(x2) + I(x3) + I(x4) + I(x5) +
I(x6) + I(x7) + I(x8) + I(x9) + I(x10))
predict
t.test(predict$coefficients[1])
predict <- lm(y~x +I(x1) + I(x2) + I(x3) + I(x4) + I(x5) +
I(x6) + I(x7) + I(x8) + I(x9) + I(x10))
t.test(predict$coefficients[1])
f.test(predict)
var.test(predict$coefficients[1])
var.test(predict$coefficients[1], predict$coefficients[2])
aov(predict)
summary(aov(predict))
model <- summary(aov(predict))
t.test(y~predict$coefficients[1])
t.test(y~predict$coefficients)
t.test(y~predict$x1)
t.test(y~x1)
model <- summary(aov(predict))
t.test(y~x)
<
model <- summary(aov(predict))
model
t.test(y, x)
t.test(y, x1)
t.test(y, x2)
t.test(y, x3)
t.test(y, x4)
t.test(y, x1)
t.test(y, x2)
source('~/.active-rstudio-document', echo=TRUE)
t.test(y, x3) # t =
t.test(y, x4) #
t.test(y, x5)
t.test(y, x6) # t =
t.test(y, x7) #
t.test(y, x8) #
t.test(y, x9)
t.test(y, x1) # t = 5.509
t.test(y, x2) # p-value = 4.7131
t.test(y, x3) # p-value = 4.6204
t.test(y, x4) # p-value = 3.9311
t.test(y, x4) # p-value = 0.0004385
t.test(y, x5) # p-value = 4.1195
model <- summary(aov(predict))
source('~/.active-rstudio-document', echo=TRUE)
model
t.test(y, x6) # p-value = 5.8629
t.test(y, x7) # p-value = 4.6401
t.test(y, x7) # p-value = 9.116e-05
t.test(y, x8) # p-value = 4.1345
t.test(y, x9) # p-value =
t.test(y, x10) #p-value
t.test(y, x10) #p-value = 8.477e-05
model <- summary(aov(predict))
model
shiny::runApp('C:/Users/somch/OneDrive - UW/Infomatics/INFO 201 - Technical Foundations/Final Project/Final-Project')
shiny::runApp('C:/Users/somch/OneDrive - UW/Infomatics/INFO 201 - Technical Foundations/Final Project/Final-Project')
runApp('C:/Users/somch/OneDrive - UW/Infomatics/INFO 201 - Technical Foundations/Final Project/Final-Project')
runApp('C:/Users/somch/OneDrive - UW/Infomatics/INFO 201 - Technical Foundations/Final Project/Final-Project')
runApp('C:/Users/somch/OneDrive - UW/Infomatics/INFO 201 - Technical Foundations/Final Project/Final-Project')
runApp('C:/Users/somch/OneDrive - UW/Infomatics/INFO 201 - Technical Foundations/Final Project/Final-Project')
runApp('C:/Users/somch/OneDrive - UW/Infomatics/INFO 201 - Technical Foundations/Final Project/Final-Project')
View(marital_status_data)
arrival_marital_status <- read.csv(
"Refugees/arrival_marital_status/combined_marital_status.csv",
stringsAsFactors = FALSE
)
setwd("C:/Users/somch/OneDrive - UW/Infomatics/INFO 201 - Technical Foundations/Final Project/Final-Project")
marital_status_data <- arrival_marital_status %>%
filter(character != "Total") %>%
mutate(year_2008 = as.numeric(gsub(",", "", arrival_total_2008)),
year_2009 = as.numeric(gsub(",", "", arrival_total_2009)),
year_2010 = as.numeric(gsub(",", "", arrival_total_2010)),
year_2011 = as.numeric(gsub(",", "", arrival_total_2011)),
year_2012 = as.numeric(gsub(",", "", arrival_total_2012)),
year_2013 = as.numeric(gsub(",", "", arrival_total_2013)),
year_2014 = as.numeric(gsub(",", "", arrival_total_2014)),
year_2015 = as.numeric(gsub(",", "", arrival_total_2015)),
year_2016 = as.numeric(gsub(",", "", arrival_total_2016))) %>%
select(character, year_2008, year_2009, year_2010,
year_2011, year_2012,
year_2013, year_2014,
year_2015, year_2016)
arrival_age_data <- read.csv("Refugees/arrival_age/combined_age.csv",
stringsAsFactors = FALSE)
arrival_gender_data <- read.csv("Refugees/arrival_gender/combined_gender.csv",
stringsAsFactors = FALSE)
arrival_marital_status <- read.csv(
"Refugees/arrival_marital_status/combined_marital_status.csv",
stringsAsFactors = FALSE
)
server <- function(input, output) {
# Julianne - Made graphs refering to the cap limit and how many refugees
# arrived from both regional and countries.
output$ceilings <- renderPlot({
ggplot(caps, aes(x = Year)) +
geom_line(aes(y= Cap, colour= "Cap")) +
geom_line(aes(y= Admitted, colour= "Admitted")) +
geom_point(aes (y = Cap)) +
geom_point(aes (y = Admitted)) +
scale_x_continuous(
breaks = seq(2008, 2016, 1)
) +
scale_y_continuous(
"Total Numbers of People",
breaks= seq(56000, 86000, 2000)
) +
ggtitle("Refugee Admissions Ceiling vs Total Refugee Admissions") +
scale_color_manual(
name = "Total Numbers",
values= c(
"Cap" = "red",
"Admitted" = "green"
),
labels = c(
"Admitted",
"Ceiling Cap"
)
)
})
output$region_time <- renderPlotly({
region_plot <- ggplot(
regionals,
aes_string(
x = "years",
y = input$area
)
) +
geom_line(color = "orange") +
scale_x_continuous(breaks = seq(2008, 2016, 1)) +
ggtitle(
paste0(
"Change In Total Regional Arrivals By ",
input$area,
" From 2008-2016"
)
) +
xlab("Year") +
ylab("Arrivals")
region_plot2 <- ggplotly(region_plot)
region_plot2
})
output$country_time <- renderPlotly({
country_plot <- ggplot(
countries,
aes_string(
x = "year",
y = input$country
)
) +
geom_line(color = "purple") +
scale_x_continuous(breaks = seq(2008, 2016, 1)) +
ggtitle(
paste0(
"Change In Total Arrivals By ",
input$country,
" From 2008-2016"
)
) +
xlab("Year") +
ylab("Arrivals")
country_plot2 <- ggplotly(country_plot)
country_plot2
})
# Prachatorn - Made the world map of refugees and asylum seekers to the
# United States
output$maps <- renderPlotly ({
return(world_map(input$asylums,input$year))
})
# Hekma - Made the graphs for the different demographics(age, gender,
# marital status) of refugees arriving to the United States.
output$age_chart <- renderPlot({
arrival_age <- arrival_age_data %>%
filter(character != "Total") %>%
mutate(year_2008 = as.numeric(gsub(",", "", arrival_total_2008)),
year_2009 = as.numeric(gsub(",", "", arrival_total_2009)),
year_2010 = as.numeric(gsub(",", "", arrival_total_2010)),
year_2011 = as.numeric(gsub(",", "", arrival_total_2011)),
year_2012 = as.numeric(gsub(",", "", arrival_total_2012)),
year_2013 = as.numeric(gsub(",", "", arrival_total_2013)),
year_2014 = as.numeric(gsub(",", "", arrival_total_2014)),
year_2015 = as.numeric(gsub(",", "", arrival_total_2015)),
year_2016 = as.numeric(gsub(",", "", arrival_total_2016))) %>%
select(character, year_2008, year_2009, year_2010,
year_2011, year_2012,
year_2013, year_2014,
year_2015, year_2016)
chart_two <- ggplot(data = arrival_age) +
geom_col(
mapping = aes_string(
x = input$year_age,
y = "character",
width = 5
)
) +
geom_point(
mapping = aes_string(
x = input$year_age,
y = "character",
color = input$year_age,
size = input$year_age)) +
labs(
y = "Age",
x = "Total Number of Refugees",
title = paste0(
"Total Number of Refugees Arrived by Age during ",
gsub("year_", "", input$year_age)),
color = "Number of Refugee Arrivals",
size = "Number of Refugee Arrivals"
) +
theme(
axis.text.x = element_text(angle = 60, hjust = 1)) +
ylim(
"Under 1 year",
"1 to 4 years",
"5 to 9 years",
"10 to 14 years",
"15 to 19 years",
"20 to 24 years",
"25 to 29 years",
"30 to 34 years",
"35 to 39 years",
"40 to 44 years",
"45 to 49 years",
"50 to 54 years",
"55 to 59 years",
"60 to 64 years",
"65 to 74 years",
"75 years and over"
) +
scale_color_gradient(high = "darkblue", low = "lightblue")
chart_two
})
# Arrival Gender Chart
output$gender_chart <- renderPlotly({
arrival_f_m <- arrival_gender_data %>%
filter(character != "Total") %>%
mutate(year_2008 = as.numeric(gsub(",", "", arrival_total_2008)),
year_2009 = as.numeric(gsub(",", "", arrival_total_2009)),
year_2010 = as.numeric(gsub(",", "", arrival_total_2010)),
year_2011 = as.numeric(gsub(",", "", arrival_total_2011)),
year_2012 = as.numeric(gsub(",", "", arrival_total_2012)),
year_2013 = as.numeric(gsub(",", "", arrival_total_2013)),
year_2014 = as.numeric(gsub(",", "", arrival_total_2014)),
year_2015 = as.numeric(gsub(",", "", arrival_total_2015)),
year_2016 = as.numeric(gsub(",", "", arrival_total_2016))) %>%
select(character, year_2008, year_2009, year_2010,
year_2011, year_2012,
year_2013, year_2014,
year_2015, year_2016)
arrival_f_m <- arrival_f_m %>%
mutate(color = c("lightcoral", "cyan3"))
chart_three <- ggplot(data = arrival_f_m) +
geom_col(
mapping = aes_string(
x = "character",
y = input$year_gender
# fill = "character"
), fill = arrival_f_m$color
) +
labs(
x = "Gender",
y = "Total Number of Refugees",
title = paste0(
"Total Number of Refugees Arrived by Gender during ",
gsub("year_", "", input$year_gender)
)
) +
theme(
axis.text.x = element_text(angle = 60, hjust = 1),
legend.title = element_blank(),
legend.position = "none") +
coord_flip()
chart3 <- ggplotly(chart_three)
chart3
})
# Arrival Marital Status Chart
output$martial_status_chart <- renderPlotly({
marital_status_data <- arrival_marital_status %>%
filter(character != "Total") %>%
mutate(year_2008 = as.numeric(gsub(",", "", arrival_total_2008)),
year_2009 = as.numeric(gsub(",", "", arrival_total_2009)),
year_2010 = as.numeric(gsub(",", "", arrival_total_2010)),
year_2011 = as.numeric(gsub(",", "", arrival_total_2011)),
year_2012 = as.numeric(gsub(",", "", arrival_total_2012)),
year_2013 = as.numeric(gsub(",", "", arrival_total_2013)),
year_2014 = as.numeric(gsub(",", "", arrival_total_2014)),
year_2015 = as.numeric(gsub(",", "", arrival_total_2015)),
year_2016 = as.numeric(gsub(",", "", arrival_total_2016))) %>%
select(character, year_2008, year_2009, year_2010,
year_2011, year_2012,
year_2013, year_2014,
year_2015, year_2016)
marital_status_data <- marital_status_data %>%
mutate(color = c("brown2","yellowgreen", "seagreen",
"deepskyblue2", "magenta1"
))
chart_four <- ggplot(data = marital_status_data) +
geom_col(
mapping = aes_string(
x = "character",
y = input$year_marital_status
), fill = marital_status_data$color
) +
labs(
x = "Marital Status",
y = "Total Number of Refugees",
title = paste0(
"Total Number of Refugees Arrived by Marital Status during ",
gsub("year_", "", input$year_marital_status)
)
) +
theme(
axis.text.x = element_text(angle = 60, hjust = 1),
legend.position = "none"
) +
coord_flip()
chart4 <- ggplotly(chart_four)
chart4
})
# Marina - Made graphs to show the number of asylum seekers in both
# affirmative and defensive from different countries.
filtered_Data <- reactive({
filtered_D <- filter(
gather_affirm,
gather_affirm$Country == input$select_country
)
})
filtered <- reactive({
filter <- filter(
gather_defens,
gather_defens$Country == input$select_country2
)
})
# Plot of Affrimative Asylum
output$affirmative <- renderPlot({
ggplot(filtered_Data(), aes(x = Year,y = Value)) +
geom_bar(stat = "identity", fill = "cornflowerblue") +
ggtitle(paste0("Affirmative Asylum for ", input$select_country)) +
xlab("Year") +
ylab("Number of Affirmative Asylum Cases") +
theme_grey(base_size = 18)
})
# Plot defensive asylum graph
output$defensive <- renderPlot({
ggplot(filtered(), aes(x = Year,y = Value)) +
geom_bar(stat = "identity", fill = "forestgreen") +
ggtitle(paste0("Defensive Asylum for ", input$select_country2)) +
xlab("Year") +
ylab("Number of Defensive Asylum Cases") +
theme_grey(base_size = 18)
})
}
# Arrival Marital Status Chart
output$martial_status_chart <- renderPlotly({
marital_status_data <- arrival_marital_status %>%
filter(character != "Total") %>%
mutate(year_2008 = as.numeric(gsub(",", "", arrival_total_2008)),
year_2009 = as.numeric(gsub(",", "", arrival_total_2009)),
year_2010 = as.numeric(gsub(",", "", arrival_total_2010)),
year_2011 = as.numeric(gsub(",", "", arrival_total_2011)),
year_2012 = as.numeric(gsub(",", "", arrival_total_2012)),
year_2013 = as.numeric(gsub(",", "", arrival_total_2013)),
year_2014 = as.numeric(gsub(",", "", arrival_total_2014)),
year_2015 = as.numeric(gsub(",", "", arrival_total_2015)),
year_2016 = as.numeric(gsub(",", "", arrival_total_2016))) %>%
select(character, year_2008, year_2009, year_2010,
year_2011, year_2012,
year_2013, year_2014,
year_2015, year_2016)
marital_status_data <- marital_status_data %>%
mutate(color = c("brown2","yellowgreen", "seagreen",
"deepskyblue2", "magenta1"
))
chart_four <- ggplot(data = marital_status_data) +
geom_col(
mapping = aes_string(
x = "character",
y = input$year_marital_status
), fill = marital_status_data$color
) +
labs(
x = "Marital Status",
y = "Total Number of Refugees",
title = paste0(
"Total Number of Refugees Arrived by Marital Status during ",
gsub("year_", "", input$year_marital_status)
)
) +
theme(
axis.text.x = element_text(angle = 60, hjust = 1),
legend.position = "none"
) +
coord_flip()
chart4 <- ggplotly(chart_four)
chart4
})
marital_status_data <- arrival_marital_status %>%
filter(character != "Total") %>%
mutate(year_2008 = as.numeric(gsub(",", "", arrival_total_2008)),
year_2009 = as.numeric(gsub(",", "", arrival_total_2009)),
year_2010 = as.numeric(gsub(",", "", arrival_total_2010)),
year_2011 = as.numeric(gsub(",", "", arrival_total_2011)),
year_2012 = as.numeric(gsub(",", "", arrival_total_2012)),
year_2013 = as.numeric(gsub(",", "", arrival_total_2013)),
year_2014 = as.numeric(gsub(",", "", arrival_total_2014)),
year_2015 = as.numeric(gsub(",", "", arrival_total_2015)),
year_2016 = as.numeric(gsub(",", "", arrival_total_2016))) %>%
select(character, year_2008, year_2009, year_2010,
year_2011, year_2012,
year_2013, year_2014,
year_2015, year_2016)
marital_status_data <- marital_status_data %>%
mutate(color = c("brown2","yellowgreen", "seagreen",
"deepskyblue2", "magenta1"
))
View(marital_status_data)
runApp()
marital_status_data[marital_status_data == 0] <- 0
marital_status_data <- marital_status_data %>%
mutate(color = c("brown2","yellowgreen", "seagreen",
"deepskyblue2", "magenta1"
))
marital_status_data[marital_status_data == 0] <- 0
View(marital_status_data)
runApp()
