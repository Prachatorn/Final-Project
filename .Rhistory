shiny::runApp('C:/Users/somch/OneDrive - UW/Infomatics/INFO 201 - Technical Foundations/Assignments/a8-Prachatorn')
runApp('C:/Users/somch/OneDrive - UW/Infomatics/INFO 201 - Technical Foundations/Assignments/a8-Prachatorn')
runApp('C:/Users/somch/OneDrive - UW/Infomatics/INFO 201 - Technical Foundations/Assignments/a8-Prachatorn')
runApp('C:/Users/somch/OneDrive - UW/Infomatics/INFO 201 - Technical Foundations/Assignments/a8-Prachatorn')
runApp('C:/Users/somch/OneDrive - UW/Infomatics/INFO 201 - Technical Foundations/Assignments/a8-Prachatorn')
runApp('C:/Users/somch/OneDrive - UW/Infomatics/INFO 201 - Technical Foundations/Assignments/a8-Prachatorn')
runApp('C:/Users/somch/OneDrive - UW/Infomatics/INFO 201 - Technical Foundations/Assignments/a8-Prachatorn')
runApp('C:/Users/somch/OneDrive - UW/Infomatics/INFO 201 - Technical Foundations/Assignments/a8-Prachatorn')
runApp('C:/Users/somch/OneDrive - UW/Infomatics/INFO 201 - Technical Foundations/Assignments/a8-Prachatorn')
runApp('C:/Users/somch/OneDrive - UW/Infomatics/INFO 201 - Technical Foundations/Assignments/a8-Prachatorn')
runApp('C:/Users/somch/OneDrive - UW/Infomatics/INFO 201 - Technical Foundations/Assignments/a8-Prachatorn')
runApp('C:/Users/somch/OneDrive - UW/Infomatics/INFO 201 - Technical Foundations/Assignments/a8-Prachatorn')
runApp('C:/Users/somch/OneDrive - UW/Infomatics/INFO 201 - Technical Foundations/Assignments/a8-Prachatorn')
runApp('C:/Users/somch/OneDrive - UW/Infomatics/INFO 201 - Technical Foundations/Assignments/a8-Prachatorn')
runApp('C:/Users/somch/OneDrive - UW/Infomatics/INFO 201 - Technical Foundations/Assignments/a8-Prachatorn')
percrace <- list()
percrace$race <- c("white", "black", "amerindan", "asian", "other")
percrace$percvalue <- c(separate$percwhite, separate$percblack,
separate$percamerindan, separate$percasian,
separate$percother)
percrace$colors <- c("red", "blue", "green", "yellow", "purple")
percrace <- list()
percrace$race <- c("white", "black", "amerindan", "asian", "other")
percrace$percvalue <- c(separate$percwhite, separate$percblack,
separate$percamerindan, separate$percasian,
separate$percother)
runApp('C:/Users/somch/OneDrive - UW/Infomatics/INFO 201 - Technical Foundations/Assignments/a8-Prachatorn')
runApp('C:/Users/somch/OneDrive - UW/Infomatics/INFO 201 - Technical Foundations/Assignments/a8-Prachatorn')
runApp('C:/Users/somch/OneDrive - UW/Infomatics/INFO 201 - Technical Foundations/Assignments/a8-Prachatorn')
runApp('C:/Users/somch/OneDrive - UW/Infomatics/INFO 201 - Technical Foundations/Assignments/a8-Prachatorn')
runApp('C:/Users/somch/OneDrive - UW/Infomatics/INFO 201 - Technical Foundations/Assignments/a8-Prachatorn')
runApp('C:/Users/somch/OneDrive - UW/Infomatics/INFO 201 - Technical Foundations/Assignments/a8-Prachatorn')
runApp('C:/Users/somch/OneDrive - UW/Infomatics/INFO 201 - Technical Foundations/Assignments/a8-Prachatorn')
runApp('C:/Users/somch/OneDrive - UW/Infomatics/INFO 201 - Technical Foundations/Assignments/a8-Prachatorn')
runApp('C:/Users/somch/OneDrive - UW/Infomatics/INFO 201 - Technical Foundations/Assignments/a8-Prachatorn')
runApp('C:/Users/somch/OneDrive - UW/Infomatics/INFO 201 - Technical Foundations/Assignments/a8-Prachatorn')
runApp('C:/Users/somch/OneDrive - UW/Infomatics/INFO 201 - Technical Foundations/Assignments/a8-Prachatorn')
# Load in packages
library(dplyr)
library(ggplot2)
library(shiny)
library(plotly)
runApp('C:/Users/somch/OneDrive - UW/Infomatics/INFO 201 - Technical Foundations/Assignments/a8-Prachatorn')
runApp('C:/Users/somch/OneDrive - UW/Infomatics/INFO 201 - Technical Foundations/Assignments/a8-Prachatorn')
runApp('C:/Users/somch/OneDrive - UW/Infomatics/INFO 201 - Technical Foundations/Assignments/a8-Prachatorn')
runApp('C:/Users/somch/OneDrive - UW/Infomatics/INFO 201 - Technical Foundations/Assignments/a8-Prachatorn')
runApp('C:/Users/somch/OneDrive - UW/Infomatics/INFO 201 - Technical Foundations/Assignments/a8-Prachatorn')
sample.mean <- c(10.5, 14.8, 15.7, 10.0, 21.6)
sample.sd <- c(4.5, 6.8, 6.5, 6.7, 6.0)
aov.1 <- aov(sample.mean)
aov.1 <- aov(sample.mean~sample.sd)
aov.1
sumarry(aov.1)
summary(aov.1)
aov.1 <- aov(sample.mean)
aov.1 <- aov(sample.sd~sample.mean)
summary(aov.1)
sse(sample.mean)
sse(sample.mean, sample())
x <- c(89, 177, 189, 362, 442, 965)
y <- c(.40, .60, .66, .61, .69, .99)
plot(x, y)
plot(x, y)
lm(y~x)
aov.1 <- aov(x, y)
aov.1 <- aov(y, x)
aov.1 <- aov(y~x)
aov.1
summary(y~x)
aov.1 <- aov(y~x)
summary(y~x)
aov.1 <- aov(y~x)
aov.1
aov.1
#c.)
summary.lm(aov(y~x))
library(shiny)
library(plotly)
library(ggplot2)
library(dplyr)
library(tidyr)
runApp('C:/Users/somch/OneDrive - UW/Infomatics/INFO 201 - Technical Foundations/Final Project/Final-Project')
server <- function(input, output) {
output$maps <- renderPlotly ({
return(country_arrival(input$year))
})
}
runApp('C:/Users/somch/OneDrive - UW/Infomatics/INFO 201 - Technical Foundations/Final Project/Final-Project')
runApp('C:/Users/somch/OneDrive - UW/Infomatics/INFO 201 - Technical Foundations/Final Project/Final-Project')
runApp('C:/Users/somch/OneDrive - UW/Infomatics/INFO 201 - Technical Foundations/Final Project/Final-Project')
runApp('C:/Users/somch/OneDrive - UW/Infomatics/INFO 201 - Technical Foundations/Final Project/Final-Project')
runApp('C:/Users/somch/OneDrive - UW/Infomatics/INFO 201 - Technical Foundations/Final Project/Final-Project')
runApp('C:/Users/somch/OneDrive - UW/Infomatics/INFO 201 - Technical Foundations/Final Project/Final-Project')
runApp('C:/Users/somch/OneDrive - UW/Infomatics/INFO 201 - Technical Foundations/Final Project/Final-Project')
runApp('C:/Users/somch/OneDrive - UW/Infomatics/INFO 201 - Technical Foundations/Final Project/Final-Project')
runApp('C:/Users/somch/OneDrive - UW/Infomatics/INFO 201 - Technical Foundations/Final Project/Final-Project')
source("world_map.R")
setwd("C:/Users/somch/OneDrive - UW/Infomatics/INFO 201 - Technical Foundations/Final Project/Final-Project")
runApp()
#Read in packages
library(dplyr)
library(ggplot2)
library(shiny)
library(tidyr)
library(rsconnect)
source("world_map.R")
runApp()
runApp()
affirm_map <- plot_geo(asylums) %>%
add_trace(
z = ~get(paste0("year_", years)),
color = ~get(paste0("year_", years)),
colors = "Reds",
text = ~country,
locations = ~code,
marker = list(
line = list(
color = toRGB("black"),
width = 0.5
)
)
) %>%
colorbar(
title = "# Of People"
) %>%
layout(
title = "Affirmative Asylums to the US From Around The World",
geo = list(
showframe = FALSE,
showcoastlines = TRUE,
projection = list(type = "Mercator")
)
)
world_map <- function(asylums, years) {
if (asylums %in% "Affirmative") {
affirm_map <- plot_geo(asylums) %>%
add_trace(
z = ~get(paste0("year_", years)),
color = ~get(paste0("year_", years)),
colors = "Reds",
text = ~country,
locations = ~code,
marker = list(
line = list(
color = toRGB("black"),
width = 0.5
)
)
) %>%
colorbar(
title = "# Of People"
) %>%
layout(
title = "Affirmative Asylums to the US From Around The World",
geo = list(
showframe = FALSE,
showcoastlines = TRUE,
projection = list(type = "Mercator")
)
)
return(affirm_map)
} else {
defensive_map <- plot_geo(asylums) %>%
add_trace(
z = ~get(paste0("year_", years)),
color = ~get(paste0("year_", years)),
colors = "Blues",
text = ~country,
locations = ~code,
marker = list(
line = list(
color = toRGB("black"),
width = 0.5
)
)
) %>%
colorbar(
title = "# Of People"
) %>%
layout(
title = "Defensive Asylums to the US From Around The World",
geo = list(
showframe = FALSE,
showcoastlines = TRUE,
projection = list(type = "Mercator")
)
)
return(defensive_map)
}
}
library(styler)
style_file("world_map.R")
shinyUI(
navbarPage(
"Immigrants",
tabPanel(
"World Maps",
sidebarLayout(
sidebarPanel(
selectInput(
"asylums",
label = "Choose an asylum",
choices = list("affirmative" = "affirmative_country",
"defensive" = "defensive_country")
),
selectInput(
"year",
label = "Hello",
choices = list("2007" = "2007", "2008" = "2008", "2009" = "2009",
"2010" = "2010", "2011" = "2011", "2012" = "2012",
"2013" = "2013", "2014" = "2014", "2015" = "2015",
"2016" = "2016")
)
),
mainPanel(
plotlyOutput("maps")
)
)
)
)
)
affirm_map <- plot_geo(asylums) %>%
add_trace(
z = ~get(paste0("year_", years)),
color = ~get(paste0("year_", years)),
colors = "Reds",
text = ~country,
locations = ~code,
marker = list(
line = list(
color = toRGB("black"),
width = 0.5
)
)
) %>%
colorbar(
title = "# Of People"
) %>%
layout(
title = "Affirmative Asylums to the US From Around The World",
geo = list(
showframe = FALSE,
showcoastlines = TRUE,
projection = list(type = "Mercator")
)
)
runApp()
runApp()
runApp()
runApp()
world_map <- function(asylums, years) {
if (asylums %in% affirmative_country) {
affirm_map <- plot_geo(asylums) %>%
add_trace(
z = ~get(paste0("year_", years)),
color = ~get(paste0("year_", years)),
colors = "Reds",
text = ~country,
locations = ~code,
marker = list(
line = list(
color = toRGB("black"),
width = 0.5
)
)
) %>%
colorbar(
title = "# Of People"
) %>%
layout(
title = "Affirmative Asylums to the US From Around The World",
geo = list(
showframe = FALSE,
showcoastlines = TRUE,
projection = list(type = "Mercator")
)
)
return(affirm_map)
} else {
defensive_map <- plot_geo(asylums) %>%
add_trace(
z = ~get(paste0("year_", years)),
color = ~get(paste0("year_", years)),
colors = "Blues",
text = ~country,
locations = ~code,
marker = list(
line = list(
color = toRGB("black"),
width = 0.5
)
)
) %>%
colorbar(
title = "# Of People"
) %>%
layout(
title = "Defensive Asylums to the US From Around The World",
geo = list(
showframe = FALSE,
showcoastlines = TRUE,
projection = list(type = "Mercator")
)
)
return(defensive_map)
}
}
runApp()
source("world_map.R")
runApp()
world_map <- function(asylums, years) {
if (pd.Dataframe(asylums, affirmative_country)) {
affirm_map <- plot_geo(asylums) %>%
add_trace(
z = ~get(paste0("year_", years)),
color = ~get(paste0("year_", years)),
colors = "Reds",
text = ~country,
locations = ~code,
marker = list(
line = list(
color = toRGB("black"),
width = 0.5
)
)
) %>%
colorbar(
title = "# Of People"
) %>%
layout(
title = "Affirmative Asylums to the US From Around The World",
geo = list(
showframe = FALSE,
showcoastlines = TRUE,
projection = list(type = "Mercator")
)
)
return(affirm_map)
} else {
defensive_map <- plot_geo(asylums) %>%
add_trace(
z = ~get(paste0("year_", years)),
color = ~get(paste0("year_", years)),
colors = "Blues",
text = ~country,
locations = ~code,
marker = list(
line = list(
color = toRGB("black"),
width = 0.5
)
)
) %>%
colorbar(
title = "# Of People"
) %>%
layout(
title = "Defensive Asylums to the US From Around The World",
geo = list(
showframe = FALSE,
showcoastlines = TRUE,
projection = list(type = "Mercator")
)
)
return(defensive_map)
}
}
runApp()
world_map <- function(asylums, years) {
if (compare.data.frame(asylums, affirmative_country)) {
affirm_map <- plot_geo(asylums) %>%
add_trace(
z = ~get(paste0("year_", years)),
color = ~get(paste0("year_", years)),
colors = "Reds",
text = ~country,
locations = ~code,
marker = list(
line = list(
color = toRGB("black"),
width = 0.5
)
)
) %>%
colorbar(
title = "# Of People"
) %>%
layout(
title = "Affirmative Asylums to the US From Around The World",
geo = list(
showframe = FALSE,
showcoastlines = TRUE,
projection = list(type = "Mercator")
)
)
return(affirm_map)
} else {
defensive_map <- plot_geo(asylums) %>%
add_trace(
z = ~get(paste0("year_", years)),
color = ~get(paste0("year_", years)),
colors = "Blues",
text = ~country,
locations = ~code,
marker = list(
line = list(
color = toRGB("black"),
width = 0.5
)
)
) %>%
colorbar(
title = "# Of People"
) %>%
layout(
title = "Defensive Asylums to the US From Around The World",
geo = list(
showframe = FALSE,
showcoastlines = TRUE,
projection = list(type = "Mercator")
)
)
return(defensive_map)
}
}
runApp()
runApp()
runApp()
source("map_tabs.R")
source("map_tabs.R")
shinyUI(
navbarPage(
"Immigrants",
map_tabs
)
)
runApp()
runApp()
library(styler)
style_file("map_tabs.R")
map_tabs <-
tabPanel(
"World Maps",
sidebarLayout(
sidebarPanel(
selectInput(
"asylums",
label = "Choose An Asylum",
choices = list("Affirmative" = "Affirmative",
"Defensive" = "Defensive")
),
selectInput(
"year",
label = "Choose A Year",
choices = list("2007" = "2007", "2008" = "2008", "2009" = "2009",
"2010" = "2010", "2011" = "2011", "2012" = "2012",
"2013" = "2013", "2014" = "2014", "2015" = "2015",
"2016" = "2016")
)
),
mainPanel(
plotlyOutput("maps")
)
),
sidebarLayout(
sidebarPanel(
selectInput(
"arrivals",
label = "Choose A Year",
choices = list("2007" = "2007", "2008" = "2008", "2009" = "2009",
"2010" = "2010", "2011" = "2011", "2012" = "2012",
"2013" = "2013", "2014" = "2014", "2015" = "2015",
"2016" = "2016")
)
)
)
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
affirmative_asylum <- read.csv("Refugees/country_affirmative_asylum.csv",
stringsAsFactors = F)
colnames(affirmative)
colnames(affirmative_asylum)
colnames(affirmative_asylum)
runApp()
colnames(affirmative_asylum)
# Working on the map for affirmative asylumn for immigrants coming to the
# United States.
affirmative_asylum[1,1]
# Working on the map for affirmative asylumn for immigrants coming to the
# United States.
affirmative_asylum[1]
# Working on the map for affirmative asylumn for immigrants coming to the
# United States.
affirmative_asylum[1, ]
# Working on the map for affirmative asylumn for immigrants coming to the
# United States.
affirmative_asylum[1]
# Working on the map for affirmative asylumn for immigrants coming to the
# United States.
colnames(affirmative_asylum)[1]
<-
a
country_arrival <- read.csv("Refugees/country_arrivals_2.csv",
stringsAsFactors = F)
runApp()
runApp()
